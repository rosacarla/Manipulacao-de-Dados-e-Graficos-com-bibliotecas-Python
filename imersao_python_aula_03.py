# -*- coding: utf-8 -*-
"""Imersao-Python-Aula 03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e-oHBJeCFc6hysrjB0xXkD0vKFwn4zNG

# Aula 3 da Imersão Python: Do Excel à Análise de Dados
> #### Instituição: Alura  
> #### Objetivo: manipulação de dados e criação de gráficos com blibliotecas Python
> #### Autora: Carla Edila Silveira
> #### Data: 27/03/2024

><img src='https://i.postimg.cc/yxRXkXmY/aula03-cabecalho.png'>
"""

# Importa bibliotecas
import pandas as pd
import plotly.express as px

# Carrega a base de dados (planilha do Excel)
df_principal = pd.read_excel("/content/acoes-pura.xlsx", sheet_name="Principal")
df_principal

# Carrega planilha da aba Total de acoes
df_total_acoes = pd.read_excel("/content/acoes-pura.xlsx", sheet_name="Total_de_acoes")
df_total_acoes

# Carrega planilha da aba Ticker
df_ticker = pd.read_excel("/content/acoes-pura.xlsx", sheet_name="Ticker")
df_ticker

# Carrega planilha da aba ChatGPT
df_chatgpt = pd.read_excel("/content/acoes-pura.xlsx", sheet_name="ChatGPT")
df_chatgpt

# Verifica nomes das colunas do dataframe
colunas = df_chatgpt.columns
print(colunas)

# Cria novo dataframe somente com cópia das colunas selecionadas e df original será apagado depois da cópia
df_principal = df_principal[['Ativo', 'Data', 'Último (R$)', 'Var. Dia (%)']].copy()
df_principal

# Renomeia colunas com caracteres especiais para evitar erros na execução do código
df_principal = df_principal.rename(columns={'Último (R$)': 'valor_final', 'Var. Dia (%)': 'var_dia_pct'}).copy()
df_principal

# Cria duas novas colunas (var_pct e valor_inicial) no dataframe
df_principal['var_pct'] = df_principal['var_dia_pct'] / 100
df_principal['valor_inicial'] = df_principal['valor_final'] / (df_principal['var_pct'] + 1)
df_principal

# Cria 2 novas colunas (Código e Qtde. Teórica do dataframe df_total_acoes)
df_principal = df_principal.merge(df_total_acoes, left_on='Ativo', right_on='Código', how='left')
df_principal

# Renomeia colunas com caracteres especiais para evitar erros na execução do código
df_principal = df_principal.rename(columns={'Código': 'codigo', 'Qtde. Teórica': 'qtde_teorica'}).copy()
df_principal

# Retira coluna 'codigo' da visualização do dataframe (ela é mantida no df original, sem alteração permanente)
df_principal = df_principal.drop(columns=['codigo'])
df_principal

# Cria coluna 'variação_rs' no dataframe
df_principal['variacao_rs'] = (df_principal['valor_final'] - df_principal['valor_inicial'])*df_principal['qtde_teorica']
df_principal

# Formatação para não apresentar números em notação científica, que terão apenas 2 casas decimais
pd.options.display.float_format = '{:.2f}'.format

# Mostra tipos de dados do df
df_principal.info()

# Converte tipo de dado da coluna 'qtde_teorica' de float para int
df_principal['qtde_teorica'] = df_principal['qtde_teorica'].astype(int)
df_principal

# Confere a conversao de tipos de dados
df_principal.info()

"""> OBSERVAÇÃO: Consulta ao ChatGPT 3.5 para criar a coluna `resultado` no dataframe `df_principal` com uso deste prompt:<br>  

><img src='https://i.postimg.cc/RhBLH3G1/aula03-chatgpt.png'><br>  
> <br>
> A resposta ao prompt foi a seguinte:<br>  
><img src='https://i.postimg.cc/Vv65TDH7/aula03-respostagpt.png'>
"""

# Aplica a lógica da fórmula (da planilha Principal) utilizando uma expressão lambda e a função apply
# Expressao lambda é usada para fazer operações linha a linha
# Função apply é chamada para aplicar outra função
df_principal['resultado'] = df_principal['variacao_rs'].apply(lambda x: 'Subiu' if x > 0 else ('Desceu' if x < 0 else 'Estável'))
df_principal

# Cria a coluna 'Nome' e retira a coluna 'Ticker' (2 colunas do df_ticker)
df_principal = df_principal.merge(df_ticker, left_on='Ativo', right_on='Ticker', how='left')
df_principal = df_principal.drop(columns=['Ticker'])
df_principal

# Cria 2 colunas ('Segmento', 'Idade (anos)') e retira a coluna 'Nome da empresa' (2 colunas do df_chatgpt)
df_principal = df_principal.merge(df_chatgpt, left_on='Nome', right_on='Nome da Empresa', how='left')
df_principal = df_principal.drop(columns=['Nome da Empresa'])
df_principal

# Renomeia colunas Nome, Segmento, Idade (anos), Ano_fundacao
df_principal = df_principal.rename(columns={'Nome': 'nome', 'Segmento': 'segmento', 'Idade (anos)':'idade', 'Ano_fundacao': 'ano_fundacao'}).copy()
df_principal

"""> OBSERVAÇÃO: Consulta ao ChatGPT 3.5 para criar a coluna `Cat_idade` no dataframe `df_principal`com uso deste prompt:<br>  
><img src='https://i.postimg.cc/FFCvJZsG/aula03-chatgpt2.png'><br>
><br>
> A resposta ao prompt foi a seguinte:<br>  
><img src='https://i.postimg.cc/XvnFy3QR/aula03-respostagpt2.png'><br>
"""

# Cria a coluna 'cat_idade' (= planilha Principal) no dataframe
# Aplica a lógica da fórmula para criar a coluna utilizando expressão lambda e função apply
df_principal['cat_idade'] = df_principal['idade'].apply(lambda x: 'Mais de 100' if x > 100 else ('Menos de 50' if x < 50 else 'Entre 50 e 100'))
df_principal

"""> OBSERVAÇÃO: Consulta ao ChatGPT para criar tabela com uso deste prompt: <br>  
><img src='https://i.postimg.cc/sg95T1L6/aula03-chatgpt3.png'><br>
> <br>
> A resposta ao prompt foi a seguinte: <br>

><img src='https://i.postimg.cc/L5YWrGgs/aula03-respostagpt3a.png'> <br>
><img src='https://i.postimg.cc/5tzT7hvN/aula03-respostagpt3b.png'>
"""

# Análise de dados com métricas
# Calcula o maior valor
maior = df_principal['variacao_rs'].max()

# Calcula o menor valor
menor = df_principal['variacao_rs'].min()

# Calcula a média
media = df_principal['variacao_rs'].mean()

# Calcula a média de quem subiu
media_subiu = df_principal[df_principal['resultado'] == 'Subiu']['variacao_rs'].mean()

# Calcula a média de quem desceu
media_desceu = df_principal[df_principal['resultado'] == 'Desceu']['variacao_rs'].mean()

# Imprime os resultados
print(f"Maior:\tR$ {maior:,.2f}")
print(f"Menor:\tR$ {menor:,.2f}")
print(f"Média:\tR$ {media:,.2f}")
print(f"Média de quem subiu:\tR$ {media_subiu:,.2f}")
print(f"Média de quem desceu:\tR$ {media_desceu:,.2f}")

# Exibe uma análise descritiva resumida da coluna 'variacao_rs'
df_principal['variacao_rs'].describe()

# Cria dataframe somente com dados de empresas com alta no resultado (Subiu)
df_principal_subiu = df_principal[df_principal['resultado'] == 'Subiu']
df_principal_subiu

# Análise de dados por segmento com soma da variação em R$ apenas de empresas com alta no resultado
df_analise_segmento = df_principal_subiu.groupby('segmento')['variacao_rs'].sum().reset_index() # função reset_index() mantém como dataframe
df_analise_segmento

# Análise do saldo da variação
df_analise_saldo = df_principal.groupby('resultado')['variacao_rs'].sum().reset_index()
df_analise_saldo

# Gera gráfico de barras com biblioteca Plotly Express
fig = px.bar(df_analise_saldo, x='resultado', y='variacao_rs', text='variacao_rs', title='Variação em Reais por Resultado')
# Exibe o gráfico na tela
fig.show()

"""> ## DESAFIOS DA AULA 3   

> ## 1) Pesquise na documentação da biblioteca Plotly Express ou no GPT como mudar a formatação dos números do gráfico de barras;
> ## 2) Fazer o gráfico de pizza no `df_análise_segmentos` com a mesma biblioteca Potly;
> ## 3) Fazer o `groupby` da categoria de idades e gerar o gráfico de barras.

> RESOLUÇÃO DO DESAFIO 1 <br>  
> Consulta ao ChatGPT sobre a formatação dos números com o Plotly Express através deste prompt: <br>
><img src='https://i.postimg.cc/C5NjPjbJ/aula03-chatgpt4.png'> <br>  
><br>
> A resposta ao prompt foi a seguinte: <br>

><img src='https://i.postimg.cc/90F4fsqt/aula03-respostagpt4.png'>
"""

# Gera gráfico de barras com formatação dos números
fig = px.bar(df_analise_saldo, x='resultado', y='variacao_rs', text='variacao_rs', title='Variação em Reais por Resultado')

# Formata o texto das barras para exibir as casas de milhar e 2 casas decimais após a vírgula
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')

# Adiciona separador de milhar nas etiquetas do eixo y
fig.update_layout(yaxis_tickformat=',.0f')

# Exibe o gráfico na tela
fig.show()

# Gera gráfico de barras com formatação dos números (separador de milhar no texto das barras)
fig = px.bar(df_analise_saldo, x='resultado', y='variacao_rs', text=df_analise_saldo['variacao_rs'].apply(lambda x: '{:,.2f}'.format(x)), title='<b>VARIAÇÃO EM REAIS POR RESULTADO</b>')

# Exibe o gráfico na tela
fig.show()

"""> RESOLUÇÃO DO DESAFIO 2 <br>  
> Consulta ao ChatGPT para criar gráfico em formato de pizza com o Plotly Express através deste prompt: <br>  
><img src='https://i.postimg.cc/B6Q4yV7d/aula03-chatgpt5.png'> <br>  
><br>
> A resposta ao prompt foi a seguinte: <br>

><img src='https://i.postimg.cc/0j03sk6n/aula03-respostagpt5.png'>
"""

# Cria o gráfico de pizza do df_analise_segmento
# Filtra os dados para remover os segmentos 'Petróleo', 'Mineração' e 'Banco'
df_analise_segmento_filtrado = df_analise_segmento[~df_analise_segmento['segmento'].isin(['Petróleo', 'Mineração', 'Banco'])]

# Ajusta o tamanho da pizza
fig = px.pie(df_analise_segmento_filtrado, values='variacao_rs', names='segmento', title='<b>VARIAÇÃO EM R$ POR SEGMENTO COM ALTA NO RESULTADO</b>', width=1024, height=1024)

# Exibe o gráfico
fig.show()

"""> RESOLUÇÃO DO DESAFIO 3 <br>  
> Consulta ao ChatGPT para fazer agrupamento da categoria de idades e gerar o gráfico de barras com o Plotly Express através deste prompt: <br>  
><img src='https://i.postimg.cc/vmX42jtV/aula03-chatgpt6.png'> <br>  
><br>
> A resposta ao prompt foi a seguinte: <br>

><img src='https://i.postimg.cc/0jGjmBjj/aula03-respostagpt6.png'> <br>
>
> Por fim, o ChatGPT ainda explicou que "este código criará um gráfico de barras usando Plotly Express com as contagens das três categorias da coluna 'cat_idade' do DataFrame df_principal".
"""

# Cria dataframe df_analise_cat_idade com agrupamento das categorias e soma da variação
df_analise_cat_idade = df_principal.groupby('cat_idade')['variacao_rs'].sum().reset_index()
df_analise_cat_idade

# Cria gráfico de barras com dados de df_analise_cat_idade usando Plotly Express
fig = px.bar(df_analise_cat_idade, x='cat_idade', y='variacao_rs', text='variacao_rs', title='<b>VARIAÇÃO EM R$ versus IDADE</b>')

# Formata números em textos das barras para terem separadores de milhar e 3 casas decimais após a vírgula
fig.update_traces(texttemplate='%{text:,.2f}')

# Atualiza os nomes dos eixos
fig.update_xaxes(title_text='Idade')
fig.update_yaxes(title_text='Variação em R$')

# Exibe o gráfico
fig.show()